var bCrypt = require('bcrypt');
var file = "./sqlite/local.db";
var sqlite3 = require("sqlite3").verbose();
var fs = require("fs");


var Sqlite = function(){
    var exists = fs.existsSync(file);
    var db = new sqlite3.Database(file);
    this.db = db;
    this.db.serialize(function() {
        if(!exists) {
            db.run("CREATE TABLE API (id integer primary key, " +
                "clientId VARCHAR(30)," +
                "ownerId INTEGER," +
                "vhmId VARCHAR(15), " +
                "vpcUrl VARCHAR(60), "+
                "accessToken VARCHAR(60)," +
                "refreshToken VARCHAR(60)," +
                "expireAt DATETIME)");
            db.run("CREATE TABLE Users (id integer primary key, " +
                "firstName VARCHAR(30), " +
                "lastName VARCHAR(30), " +
                "email VARCHAR(60), " +
                "username VARCHAR(60) NOT NULL UNIQUE, " +
                "password VARCHAR(120) NOT NULL, " +
                "userEnable BOOL, " +
                "lastLogin DATETIME, " +
                "language INTEGER, " +
                "userGroup INTEGER NOT NULL)");
            db.run("CREATE TABLE Groups (id integer primary key," +
                "groupName VARCHAR(30))");
            db.run("CREATE TABLE AccessPoints (id integer primary key," +
                "apID VARCHAR(60)," +
                "hostname VARCHAR(60), " +
                "ipv4Address VARCHAR(12))");
            db.run("CREATE TABLE Classrooms (id integer primary key," +
                "name VARCHAR(30), " +
                "accessPoint INTEGER)");
            db.run("CREATE TABLE UILanguages (id integer primary key," +
                "language VARCHAR(20)," +
                "code VARCHAR(6))");
            db.run("INSERT INTO Users VALUES (1, '', '', '', 'admin', '"+createHash("aerohive")+"', 'true', '', '1', 1)");
            db.run("INSERT INTO Groups VALUES (1, 'Administrator')");
            db.run("INSERT INTO Groups VALUES (2, 'Teacher')");
            db.run("INSERT INTO UILanguages VALUES (1, 'English', 'en')");
            db.run("INSERT INTO UILanguages VALUES (2, 'Francais', 'fr')");
        }
    });
};

Sqlite.prototype.updateDB = function(table, rowId, rows, callback){
    var updateString = "";
    var fieldNumber = 0;
    for (var field in rows) {
        if (field == 'password') {
            if (rows[field] != "") {
                if (fieldNumber != 0) {
                    updateString += ",  ";
                }
                updateString += field + "='" + createHash(rows[field]) + "'";
                fieldNumber++;
            }
        } else {
            if (fieldNumber != 0) {
                updateString += ",  ";
            }
            updateString += field + "='" + rows[field] + "'";
            fieldNumber++;
        }
    }
    updateString = 'UPDATE ' + table + ' SET ' + updateString + ' WHERE id=' + rowId + ";" ;
    console.log(updateString);
    this.db.run(updateString, function(err){
        if (err){
            return err;
        }
        callback(err);
    })
};

Sqlite.prototype.insertDB = function(table, rows, callback){
    var insertFields = "";
    var insertValues = "";
    var fieldNumber = 0;
    for (var field in rows) {
        if (fieldNumber != 0) {
            insertFields += ",  ";
            insertValues += ",  ";
        }
        if (field == 'password') {
            if (rows[field] != "") {
                insertFields += field;
                insertValues += "'" + createHash(rows[field]) + "'";
                fieldNumber++;
            }
        } else {
            insertFields += field;
            insertValues += "'" + rows[field] + "'";
            fieldNumber++;
        }
    }
    var updateString = 'INSERT INTO ' + table + ' (' + insertFields + ') VALUES (' + insertValues + ");" ;
    console.log(updateString);
    this.db.run(updateString, function(err){
        if (err){
            return err;
        }
        callback(err);
    });
};

Sqlite.prototype.processOptions = function(rOptions){
    var options = rOptions || {};
    var columnsString = "";
    var orderByString = "";
    var optionNumber = 0;
    if (options.hasOwnProperty("columns")){
        optionNumber = 0;
        for (var column in options['columns']){
            if (optionNumber != 0){
                columnsString += ", ";
            }
            columnsString += options['columns'][column];
            optionNumber++;
        }
    } else {
        columnsString = "*";
    }
    if (options.hasOwnProperty("orderBy")){
        orderByString = " ORDER BY " + options['orderBy'];
    } else {
        orderByString = "";
    }
    return { "columns": columnsString, "orderBy": orderByString};
};


Sqlite.prototype.findOne = function(table, fields, options, callback){
    /**
     Find the first row matching the fields
     Table: Table to request
     Fields: object {fieldName: fieldValue}
     Options: object {option: []} with the following options (optionals)
        columns: columns to retrieve
        orderBy: how to sort the result
     */
    var searchString = "";
    var fieldNumber = 0;
    for (var fieldName in fields){
        if (fieldNumber != 0){
            searchString += " AND "
        }
        searchString += fieldName + "='" + fields[fieldName] +"'";
        fieldNumber ++;
    }
    searchString = "(" + searchString + ")";
    var rOptions = this.processOptions(options);
    this.db.get("SELECT " + rOptions.columns + " FROM " + table + " WHERE "+ searchString, function(err, ret){
        if (err){
            callback(err);
        }
        callback(err, ret);
    });
};

Sqlite.prototype.findById = function(table, rowId, options, callback){
    /**
     Get one row by its ID
     Table: Table to request
     Options: object {option: []} with the following options (optionals)
         columns: columns to retrieve
         orderBy: how to sort the result
     */
    var rOptions = this.processOptions(options);
    this.db.get("SELECT " + rOptions.columns + " FROM " + table + " WHERE id = ?", rowId, function(err, ret){
        if (err){
            throw err;
        }
        callback(err, ret);
    });
};

Sqlite.prototype.getAll = function(table, options, callback){
/**
    Get all the row in the Database
    Table: Table to request
    Options: object {option: []} with the following options (optionals)
        columns: columns to retrieve
        orderBy: how to sort the result
 */
    var rOptions = this.processOptions(options);
    this.db.all("SELECT " + rOptions.columns + " FROM " + table + rOptions.orderBy, function(err, ret){
        if (err){
            throw err;
        }
        callback(err, ret);
    })
};


isValidPassword = function(user, password){
    return bCrypt.compareSync(password, user.password);
};

createHash = function(password){
    return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);
};

module.exports.Sqlite = Sqlite;
module.exports.isValidPassword = isValidPassword;
module.exports.createHash = createHash;
