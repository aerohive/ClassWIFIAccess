var db = require(appRoot + "/app").db;
var School = require(appRoot + '/bin/models/school');

function DeviceSerializer(row) {
    this.device = {};
    this.device.id = row.deviceId;
    this.device.ownerId = row.ownerId;
    this.device.macAddress = row.macAddress;
    this.device.hostName = row.hostName;
    this.device.serialId = row.serialId;
    this.device.model = row.model;
    this.device.ip = row.ip;
    this.device.simType = row.simType;
    this.device.locations = row.locations;
    this.device.SchoolId = row.SchoolId;
    this.device.connected = row.connected;
    this.device.ApiId = row.ApiId;
}

DeviceSerializer.prototype.insertDB = function (callback) {
    db.insertDB("Device", this.device, function (err) {
        if (err) {
            callback(err);
        }
        callback(err);
    });
};

DeviceSerializer.prototype.updateDB = function (rowId, callback) {
    db.updateDB("Device", rowId, this.device, function (err) {
        if (err) {
            callback(err);
        }
        callback(err);
    });
};


function Device() {
    this.id = null;
    this.ownerId = "";
    this.macAddress = "";
    this.hostName = "";
    this.serialId = "";
    this.model = "";
    this.ip = "";
    this.simType = "";
    this.locations = "";
    this.SchoolId = "";
    this.schoolName = "";
    this.connected = "";
    this.ApiId = "";
}

createDevice = function (deviceFromDB, callback) {
    var device = new Device();
    device.id = deviceFromDB.id;
    device.ownerId = deviceFromDB.ownerId;
    device.macAddress = deviceFromDB.macAddress;
    device.hostName = deviceFromDB.hostName;
    device.serialId = deviceFromDB.serialId;
    device.model = deviceFromDB.model;
    device.ip = deviceFromDB.ip;
    device.simType = deviceFromDB.simType;
    device.locations = deviceFromDB.locations;
    device.connected = deviceFromDB.connected;
    device.ApiId = deviceFromDB.ApiId;
    device.SchoolId = deviceFromDB.SchoolId;
    School.findById(device.SchoolId, null, null, function (err, school) {
        if (school) {
            device.schoolName = school.schoolName;
        }
        callback(device);
    });

};

findOne = function(filters, options, callback){
    db.findOne("Device", filters, options, function(err, deviceFromDB){
        if (err)callback(err);
        else if (!deviceFromDB) callback(null, null);
        else {
            createDevice(deviceFromDB, function (device) {
                callback(err, device);
            });
        }
    });
};

findById = function(rowId,  filters,options, callback){
    db.findById("Device", rowId, filters, options, function(err, deviceFromDB){
        if (err)callback(err);
        else if (!deviceFromDB) callback(null, null);
        else {
            createDevice(deviceFromDB, function (device) {
                callback(err, device);
            });
        }
    });
};

findAll = function (filters, options, callback) {
    var rOptions = options || {"orderBy":"hostName"};
    db.findAll("Device", filters, rOptions, function (err, deviceFromDB) {
        if (err)callback(err);
        else if (deviceFromDB == null || deviceFromDB.length == 0) callback(null, null);
        else {
            if (deviceFromDB) {
                var insert = 0;
                var devices = [];
                for (var i = 0; i < deviceFromDB.length; i++) {
                    createDevice(deviceFromDB[i], function (device) {
                        devices.push(device);
                        insert ++;
                        if (insert == deviceFromDB.length) {
                            callback(null, devices);
                        }
                    })
                }
            }
        }
    });
};

findAllAP = function (filters, options, callback){
    filters["model"]= ["LIKE", 'AP%'];
    db.findAll("Device", filters, rOptions, function (err, deviceFromDB) {
        if (err)callback(err);
        else if (deviceFromDB == null || deviceFromDB.length == 0) callback(null, null);
        else {
            if (deviceFromDB) {
                var insert = 0;
                var devices = [];
                for (var i = 0; i < deviceFromDB.length; i++) {
                    createDevice(deviceFromDB[i], function (device) {
                        devices.push(device);
                        insert ++;
                        if (insert == deviceFromDB.length) {
                            callback(null, devices);
                        }
                    })
                }
            }
        }
    });
}

getAll = function(options, callback){
    this.findAll(null, options, function(err, res){
        callback(err, res);
    });
};

deleteById = function(deviceId, callback){
    db.deleteById("Device", deviceId, function(err, ret){
        callback(ret, err);
    })
};
module.exports = Device;
module.exports.findOne = findOne;
module.exports.findById = findById;
module.exports.findAll = findAll;
module.exports.findAllAP = findAllAP;
module.exports.getAll = getAll;
module.exports.DeviceSerializer = DeviceSerializer;
module.exports.deleteById = deleteById;