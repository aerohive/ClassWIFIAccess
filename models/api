var db = require(appRoot + "/app").db;
var apiAuth = require(appRoot + "/bin/ah_api/auth");
var apiConf = require(appRoot + "/bin/ah_api/config");
var School = require(appRoot + "/models/school");

function ApiSerializer(row){
    this.api = {};
    this.api.clientId= apiConf.clientId;
    this.api.ownerId= row.ownerId;
    this.api.vhmId= row.vhmId;
    this.api.vpcUrl = row.vpcUrl;
    this.api.accessToken= row.accessToken;
    this.api.refreshToken= row.refreshToken;
    this.api.expireAt= row.expireAt;
    this.api.SchoolId = row.SchoolId;
}

ApiSerializer.prototype.updateDB = function(apiId, callback){
    db.updateDB("API", apiId, this.api, function(err){
        if (err){
            callback(err);
        }
        callback(err);
    });
};

ApiSerializer.prototype.insertDB = function(callback){
    db.insertDB("API", this.api, function(err){
        if (err){
            callback(err);
        }
        callback(err);
    });
};


function ApiErrorSerializer(row){
    this.status = row.status;
    this.code = row.code;
    this.message = row.message;
    this.errorParams = row.errorParams;
}

function Api(){
    this.id=null;
    this.clientId="";
    this.ownerId="";
    this.vhmId="";
    this.vpcUrl="";
    this.accessToken="";
    this.refreshToken="";
    this.expireAt="";
    this.SchoolId="";
    this.schoolName="";
}


createAPI = function(apiFromDB, callback){
    var api = new Api();
    api.id = apiFromDB.id;
    api.clientId = apiFromDB.clientId;
    api.ownerId = apiFromDB.ownerId;
    api.vhmId = apiFromDB.vhmId;
    api.vpcUrl = apiFromDB.vpcUrl;
    api.accessToken = apiFromDB.accessToken;
    api.refreshToken = apiFromDB.refreshToken;
    api.expireAt = new Date(apiFromDB.expireAt);
    api.SchoolId = apiFromDB.SchoolId;
    if (api.SchoolId > 0){
        School.findById(api.SchoolId, null, function(err, school){
            if (school){
                api.schoolName = school.schoolName;
            }
            callback(api);
        });
    } else {
        api.schoolName = "";
        callback(api);
    }
};

Api.prototype.registerApp = function(authCode, callback){
    apiAuth.getPermanentToken(authCode, apiConf.redirectUrl, apiConf.secret, apiConf.clientId, function(res){
        callback(res);
    });
};

getClientId = function(){
    return apiConf.clientId;
};

getRedirectUrl = function(){
    return apiConf.redirectUrl;
};

getSecret = function(){
    return apiConf.secret;
};

findOne = function(filters, options, callback){
    db.findOne("API", filters, options, function(err, apiFromDB){
        if (err) callback(err);
        else if (!apiFromDB) callback(null, null);
        else {
            createAPI(apiFromDB, function (api) {
                callback(err, api);
            });
        }
    });
};

findAll = function(filters, options, callback){
    var rOptions = options || {"orderBy":"vhmId"};
    db.findAll("API", filters, rOptions, function(err, apiFromDB){
        if (err) callback(err);
        else if (apiFromDB.length == 0) callback(null, null);
        else {
            var apiList = [];
            var apiNum = 0;
            for (var api in apiFromDB){
                createAPI(apiFromDB[api], function (apiObject) {
                    apiList.push(apiObject);
                    apiNum++;
                    if (apiNum == apiFromDB.length) {
                        callback(err, apiList);
                    }
                });
            }
        }
    });
};

findById = function(rowId, options, callback){
    db.findById("API", rowId, options, function(err, apiFromDB){
        if (err) callback(err);
        else if (!apiFromDB) callback(null, null);
        else {
            createAPI(apiFromDB, function (api) {
                callback(err, api);
            });
        }
    });
};



getAll = function(options, callback){
    this.findAll(null, options, function(err, res){
        callback(err, res)
    })
};

deleteById = function(apiId, callback){
    db.deleteById("API", apiId, function(err, ret){
        callback(ret, err);
    })
};

module.exports = Api;
module.exports.findAll = findAll;
module.exports.findOne = findOne;
module.exports.findById = findById;
module.exports.getAll = getAll;
module.exports.ApiSerializer = ApiSerializer;
module.exports.ApiErrorSerializer = ApiErrorSerializer;
module.exports.getClientId = getClientId;
module.exports.getSecret = getSecret;
module.exports.getRedirectUrl = getRedirectUrl;
module.exports.deleteById = deleteById;