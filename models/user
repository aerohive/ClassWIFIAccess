var db = require(appRoot + "/app").db;
var Group = require(appRoot + '/models/group');
var School = require(appRoot + '/models/school');
var UiLanguage = require(appRoot + '/models/uiLanguage');

/////////////////////////////// Update the lastLogin entry ///////////////////////////////
newLogin = function(userId, callback){
    db.updateDB("User", userId, {lastLogin: new Date().getTime()}, function(err){
        if (err){
            callback(err);
        }
        callback(err);
    });
};

/////////////////////////////// Serializer and DB update/insert ///////////////////////////////
function UserSerializer(row){
    this.user = {};
    this.user.firstName=row.firstName;
    this.user.lastName=row.lastName;
    this.user.email=row.email;
    this.user.username=row.username;
    this.user.password=row.password;
    if (row.userEnable == undefined){
        this.user.userEnable=false;
    } else {
        this.user.userEnable=true;
    }
    this.user.GroupId=row.GroupId;
    this.user.LanguageId=row.LanguageId;
    this.user.SchoolId=row.SchoolId;
}


UserSerializer.prototype.updateDB = function(userId, callback){
    db.updateDB("User", userId, this.user, function(err){
        if (err){
            callback(err);
        }
        callback(err);
    });
};

UserSerializer.prototype.insertDB = function(callback){
    db.insertDB("User", this.user, function(err){
        if (err){
            callback(err);
        }
        callback(err);
    });
};


/////////////////////////////// Model and DB Get ///////////////////////////////
function User(){
    this.id=null;
    this.lastLogin="";
    this.firstName="";
    this.lastName="";
    this.email="";
    this.username="";
    this.password="";
    this.userEnable=true;
    this.GroupId="";
    this.groupName="";
    this.SchoolId="";
    this.schoolName="";
    this.LanguageId="";
    this.language="";
}

createUser = function(userFromDB, callback){
    var user = new User();
    user.id = userFromDB.id;
    user.lastLogin = new Date(userFromDB.lastLogin);
    user.firstName = userFromDB.firstName;
    user.lastName = userFromDB.lastName;
    user.email = userFromDB.email;
    user.username = userFromDB.username;
    user.password = userFromDB.password;
    user.userEnable = userFromDB.userEnable;
    user.GroupId = userFromDB.GroupId;
    Group.findById(user.GroupId, null, function(err, group){
        if (group){
            user.groupName = group.groupName;
        }
        user.SchoolId = userFromDB.SchoolId;
        School.findById(user.SchoolId, null, function(err, school){
            if (school) {
                user.schoolName = school.schoolName;
            }
            user.LanguageId = userFromDB.LanguageId;
            UiLanguage.findById(user.LanguageId, null, function(err, uiLanguage){
                if (uiLanguage){
                    user.language = uiLanguage.language;
                }
                callback(user);
            });
        });
    });
};

findOne = function(filters, options, callback){
    db.findOne("User", filters, options, function(err, userFromDB){
        if (err)callback(err);
        else if (!userFromDB) callback(null, null);
        else {
            createUser(userFromDB, function (user) {
                callback(err, user);
            });
        }
    });
};

findById = function(rowId, options, callback){
    db.findById("User", rowId, options, function(err, userFromDB){
        if (err) callback(err);
        else if (!userFromDB) callback(null, null);
        else {
            createUser(userFromDB, function (user) {
                callback(err, user);
            });
        }
    });
};



findAll = function(filters, options, callback){
    var rOptions = options || {"orderBy":"username"};
    db.findAll("User", filters, rOptions, function(err, usersFromDB){
        if (err) callback(err);
        else if (!usersFromDB) callback(null, null);
        else {
            if (usersFromDB) {
                var insert = 0;
                var users = [];
                for (var i = 0; i < usersFromDB.length; i++) {
                    createUser(usersFromDB[i], function (user) {
                        users.push(user);
                        insert ++;
                        if (insert == usersFromDB.length) {
                            callback(null, users);
                        }
                    })
                }
            }
        }
    });
};

getAll = function(options, callback){
    this.findAll(null, options, function(err, res){
        callback(err, res);
    })
};

deleteByID = function(userId, callback){
    db.deleteById("User", userId, function(err, ret){
        callback(ret, err);
    })
};

module.exports = User;
module.exports.newLogin = newLogin;
module.exports.findOne = findOne;
module.exports.findById = findById;
module.exports.getAll = getAll;
module.exports.findAll = findAll;
module.exports.UserSerializer = UserSerializer;
module.exports.deleteById = deleteByID;