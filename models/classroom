var db = require(appRoot + "/app").db;
var School = require(appRoot + "/models/school");
var Device = require(appRoot + "/models/device");
var Lesson = require(appRoot + "/models/lesson");

function ClassroomSeralizer(row) {
    this.classroom = {};
    this.classroom.classroomName = row.classroomName;
    this.classroom.DeviceId = row.DeviceId;
    this.classroom.SchoolId = row.SchoolId;
}

ClassroomSeralizer.prototype.updateDB = function (classroomId, callback) {
    db.updateDB("Classroom", classroomId, this.classroom, function (err) {
        if (err) {
            callback(err);
        }
        callback(err);
    });
};

ClassroomSeralizer.prototype.insertDB = function (callback) {
    db.insertDB("Classroom", this.classroom, function (err) {
        if (err) {
            callback(err);
        }
        callback(err);
    });
};

function Classroom() {
    this.id = "";
    this.classroomName = "";
    this.DeviceId = "";
    this.deviceHostname = "";
    this.deviceConnected = "";
    this.SchoolId = "";
    this.schoolName = "";
    this.wifiEnabled = "";
}

function getDevice(DeviceId, callback) {
    var device = null;
    if (DeviceId > 0) {
        Device.findById(DeviceId, null, function (err, device) {
            callback(device);
        });
    } else {
        callback(device);
    }
}

function getSchoolName(SchoolId, callback) {
    var schoolName = "";
    if (SchoolId > 0) {
        School.findById(SchoolId, null, function (err, school) {
            if (school) {
                schoolName = school.schoolName;
            }
            callback(schoolName);
        });
    } else {
        callback(schoolName);
    }
}

function getWifiState(classroom, callback) {
    if (classroom.DeviceId > 0) {
        Lesson.findActive(classroom.id, classroom.SchoolId, function (err, ret) {
            if (err) {
                callback(err);
            }
            if (ret.length > 0) {
                callback(true);
            } else {
                callback(false);
            }
        });
    } else {
        callback("");
    }
}

createClassroom = function (classroomFromDB, callback) {
    var classroom = new Classroom();
    if (classroomFromDB) {
        classroom.id = classroomFromDB.id;
        classroom.classroomName = classroomFromDB.classroomName;
        classroom.DeviceId = classroomFromDB.DeviceId;
        classroom.SchoolId = classroomFromDB.SchoolId;
        getDevice(classroom.DeviceId, function (device) {
            if (device) {
                classroom.deviceHostname = device.hostName;
                classroom.deviceConnected = device.connected;
            }
            getSchoolName(classroom.SchoolId, function (schoolName) {
                classroom.schoolName = schoolName;
                getWifiState(classroom, function (wifiState) {
                    classroom.wifiEnabled = wifiState;
                    callback(classroom);
                });
            });
        });
    }
};

sortClassroom = function (classroomA, classroomB) {
    var a = classroomA.classroomName.toLowerCase();
    var b = classroomB.classroomName.toLowerCase();
    if (a < b) {
        return -1;
    } else if (a > b) {
        return 1;
    } else {
        return 0;
    }
};

findAll = function (fields, options, callback) {
    db.findAll("Classroom", fields, options, function (err, classroomFromDB) {
        if (err) {
            callback(err);
        } else if (classroomFromDB.length == 0) {
            callback(null, null);
        } else {
            var classroomList = [];
            var classroomNum = 0;
            for (var classroom in classroomFromDB) {
                createClassroom(classroomFromDB[classroom], function (classroomObject) {
                    classroomList.push(classroomObject);
                    classroomNum++;
                    if (classroomNum == classroomFromDB.length) {
                        classroomList.sort(sortClassroom);
                        callback(err, classroomList);
                    }
                });
            }
        }
    });
};

findActiveByDevice = function (DeviceId, SchoolId, callback) {
    var currentDate = new Date().getTime();
    if (DeviceId > 0) {
        db.customJoin(null,
            "Classroom", "Lesson",
            "Lesson.ClassroomId", "Classroom.id",
            " Classroom.DeviceId = " + DeviceId +
            " AND Lesson.SchoolId = " + SchoolId +
            " AND Lesson.startDate < " + currentDate +
            " AND " +
            " (Lesson.endDate > " + currentDate +
            " OR Lesson.endDate = 0)",
            function (err, ret) {
                if (err) {
                    callback(err);
                } else if (ret) {
                    callback(null, ret);
                } else {
                    callback(null, []);
                }
            });
    } else {
        callback(null, []);
    }
};

findOne = function (fields, options, callback) {
    db.findOne("Classroom", fields, options, function (err, classroomFromDB) {
        if (err) {
            callback(err);
        }
        createClassroom(classroomFromDB, function (classroom) {
            callback(err, classroom);
        });
    });
};

findById = function (rowId, options, callback) {
    db.findById("Classroom", rowId, options, function (err, classroomFromDB) {
        if (err) {
            callback(err);
        } else if (!classroomFromDB) {
            callback(null, null);
        } else {
            createClassroom(classroomFromDB, function (classroom) {
                callback(err, classroom);
            });
        }
    });
};

getAll = function (options, callback) {
    var rOptions = options || {"orderBy": "classroomName"};
    db.getAll("Classroom", rOptions, function (err, classroomsFromDB) {
        if (err) {
            callback(err);
        } else if (classroomsFromDB == null || classroomsFromDB.length == 0) {
            callback(null, null);
        } else {
            if (classroomsFromDB) {
                var insert = 0;
                var classroomList = [];
                for (var i = 0; i < classroomsFromDB.length; i++) {
                    createClassroom(classroomsFromDB[i], function (user) {
                        classroomList.push(user);
                        insert++;
                        if (insert == classroomsFromDB.length) {
                            classroomList.sort(sortClassroom);
                            callback(null, classroomList);
                        }
                    })
                }
            }
        }
    });
};

deleteById = function (classroomId, callback) {
    db.deleteById("Classroom", classroomId, function (err, ret) {
        callback(ret, err);
    })
};

module.exports = Classroom;
module.exports.findActiveByDevice = findActiveByDevice;
module.exports.findAll = findAll;
module.exports.findOne = findOne;
module.exports.findById = findById;
module.exports.getAll = getAll;
module.exports.deleteById = deleteById;
module.exports.ClassroomSeralizer = ClassroomSeralizer;
